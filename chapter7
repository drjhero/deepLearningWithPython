{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyM2lBeK/v0kKw1Q3dIcefaj",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/drjhero/deepLearningWithPython/blob/main/chapter7\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RCc71H7NYE8P"
      },
      "outputs": [],
      "source": [
        "# Listing 7.1\n",
        "from tensorflow import keras\n",
        "from tensorflow.keras import layers\n",
        "\n",
        "model = keras.Sequential([\n",
        "    layers.Dense(64, activation=\"relu\"),\n",
        "    layers.Dense(10, activation=\"softmax\")\n",
        "])"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wpLuo1k-VTBh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Listing 7.2\n",
        "model = keras.Sequential()\n",
        "model.add(layers.Dense(64, activation=\"relu\"))\n",
        "model.add(layers.Dense(10, activation=\"softmax\"))"
      ],
      "metadata": {
        "id": "qY5hrdiRaLfG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#model.weights # model hasn't been built, throws an error"
      ],
      "metadata": {
        "id": "e0TvI_OTa238"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "model.build(input_shape=(None, 3))\n",
        "model.weights"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sPL-unHwa9i5",
        "outputId": "1c7d2c5e-6eac-4d83-c9a9-3812c8f68b49"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<tf.Variable 'dense_6/kernel:0' shape=(3, 64) dtype=float32, numpy=\n",
              " array([[ 0.20039174,  0.28791893, -0.17307118,  0.26054764, -0.04726076,\n",
              "         -0.13186274,  0.13408643,  0.01019734,  0.16155499,  0.12077293,\n",
              "         -0.29363713, -0.12677945, -0.07054663,  0.12979567,  0.1995666 ,\n",
              "         -0.28641918,  0.0832867 , -0.00821373, -0.2922355 ,  0.00439736,\n",
              "         -0.17457119, -0.2212986 ,  0.17890659,  0.06198037, -0.03644055,\n",
              "          0.13252571, -0.12544319,  0.27801454, -0.27187318,  0.24638277,\n",
              "         -0.27354342, -0.22373612, -0.05679776, -0.29752326, -0.01519108,\n",
              "          0.26975256, -0.22123739,  0.25312006, -0.05118123, -0.1379683 ,\n",
              "         -0.14496072,  0.06824768, -0.08676061, -0.20492986,  0.17359748,\n",
              "          0.02563027,  0.15858677, -0.09794547, -0.12388611,  0.09822771,\n",
              "          0.17284578, -0.2887452 , -0.19931525, -0.10286637,  0.29837543,\n",
              "          0.04042989, -0.09087116, -0.00054589,  0.09631968,  0.16559067,\n",
              "          0.09170535,  0.16707262,  0.12808013,  0.25414592],\n",
              "        [ 0.2204482 , -0.22081666,  0.1588417 ,  0.00090617,  0.07464531,\n",
              "          0.000559  ,  0.01999196, -0.00754863,  0.26442856,  0.14402899,\n",
              "         -0.17820711, -0.05363485, -0.1005637 , -0.21096286,  0.00905764,\n",
              "          0.11896864, -0.23322141, -0.167875  , -0.25787923,  0.09666657,\n",
              "         -0.13305183, -0.151933  ,  0.26167405, -0.26562026,  0.20930183,\n",
              "          0.01528862,  0.23761761, -0.10720707,  0.25551558, -0.18547492,\n",
              "         -0.19023736, -0.23376107,  0.28539747, -0.20721641,  0.0183861 ,\n",
              "          0.10081762, -0.00159347,  0.18847016, -0.26740637, -0.04146457,\n",
              "          0.21123129, -0.18300352, -0.19165719, -0.15482035, -0.08398542,\n",
              "         -0.13097362, -0.16621797,  0.00172475, -0.26313466,  0.00694582,\n",
              "          0.13171113,  0.19638094, -0.10995209,  0.19247389,  0.20510012,\n",
              "          0.2637083 ,  0.14944655, -0.27038065, -0.01504624,  0.11451247,\n",
              "         -0.13725597, -0.12481412,  0.11534339, -0.04802126],\n",
              "        [ 0.2468257 , -0.1378132 ,  0.10607216,  0.03994691, -0.23050414,\n",
              "         -0.19200064,  0.19723439,  0.2669242 , -0.2679542 , -0.02321553,\n",
              "         -0.15600437, -0.1493764 , -0.01807067,  0.2250973 , -0.2730937 ,\n",
              "          0.04279482,  0.27604765, -0.06991263,  0.17561755,  0.07279357,\n",
              "          0.23155928, -0.05881739,  0.11040843,  0.04395771,  0.21168405,\n",
              "         -0.29633242, -0.13498092,  0.14424524, -0.24942148, -0.2759633 ,\n",
              "         -0.07552981,  0.25445646, -0.26735216, -0.10643196, -0.05502129,\n",
              "          0.12232831, -0.29426262,  0.25282234, -0.12012731, -0.06190346,\n",
              "         -0.04060426, -0.12817259,  0.21276033, -0.28172374,  0.07945228,\n",
              "          0.04904088,  0.07495731,  0.06360966, -0.01904577, -0.12179941,\n",
              "         -0.21056032, -0.23693554, -0.15574601,  0.27790475,  0.15116537,\n",
              "         -0.11876522, -0.06305279, -0.26873943, -0.00335881, -0.06329915,\n",
              "         -0.23655489, -0.16883455,  0.28378928,  0.2298469 ]],\n",
              "       dtype=float32)>,\n",
              " <tf.Variable 'dense_6/bias:0' shape=(64,) dtype=float32, numpy=\n",
              " array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,\n",
              "        0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>,\n",
              " <tf.Variable 'dense_7/kernel:0' shape=(64, 10) dtype=float32, numpy=\n",
              " array([[ 0.11577851, -0.23524587, -0.22453372, -0.01041141, -0.00959057,\n",
              "         -0.2457475 , -0.1154753 , -0.00212044,  0.15489909,  0.19182327],\n",
              "        [-0.07969967,  0.05207351,  0.18019822, -0.1613582 ,  0.00102925,\n",
              "         -0.10577077,  0.22187749,  0.13074037, -0.18817818, -0.2613611 ],\n",
              "        [ 0.17042941, -0.08582801, -0.07421477, -0.09198955,  0.09914616,\n",
              "         -0.19723159,  0.17028725,  0.264169  ,  0.24417803, -0.22757801],\n",
              "        [ 0.21359774, -0.2416599 ,  0.13716057, -0.09104529,  0.21879777,\n",
              "         -0.2654994 , -0.11309518, -0.18001065,  0.17085636,  0.08682379],\n",
              "        [ 0.07252195, -0.24254613, -0.10541414, -0.02452987,  0.19220677,\n",
              "          0.02548629, -0.10926406, -0.1995183 , -0.1395123 , -0.0624077 ],\n",
              "        [-0.27599084,  0.03616112,  0.18934011,  0.17544198, -0.16578715,\n",
              "         -0.01351625, -0.21104613, -0.22322272,  0.1814835 , -0.07322821],\n",
              "        [ 0.2044729 ,  0.06408009, -0.0811514 , -0.02162313, -0.07386799,\n",
              "         -0.11749575,  0.03714374,  0.11048463, -0.1701962 ,  0.07482198],\n",
              "        [ 0.19526315,  0.19338006, -0.06038047, -0.02735272, -0.06133729,\n",
              "          0.21829644, -0.06901956,  0.26912364, -0.0033026 , -0.06601329],\n",
              "        [-0.21345994, -0.24045826, -0.20843506, -0.25244862, -0.27679223,\n",
              "          0.27326646,  0.06605417,  0.0848555 ,  0.16726747, -0.15835328],\n",
              "        [ 0.03300476, -0.25479752, -0.16178705, -0.21824074, -0.15596876,\n",
              "          0.26931337,  0.08665618,  0.2706963 , -0.16214652, -0.02728549],\n",
              "        [ 0.1308445 ,  0.06369931,  0.02227896, -0.17500417, -0.10254617,\n",
              "         -0.17700072,  0.03156191,  0.2501413 ,  0.20670429,  0.16204694],\n",
              "        [-0.14353569,  0.1240975 , -0.03642847, -0.17792231, -0.03746919,\n",
              "          0.25238737, -0.1871711 , -0.03889039,  0.14130011,  0.02230877],\n",
              "        [ 0.04953614,  0.06394351,  0.13219509, -0.2656293 , -0.24008134,\n",
              "         -0.08261923, -0.16885918,  0.02136475, -0.15129547, -0.23989084],\n",
              "        [ 0.23560402, -0.18991932,  0.1035628 ,  0.07822537, -0.24577771,\n",
              "         -0.25968188,  0.252234  , -0.27438122,  0.11505446,  0.23356792],\n",
              "        [-0.24073464, -0.06969362, -0.09044427,  0.02896094, -0.02170345,\n",
              "          0.22820869,  0.27559176,  0.00752339,  0.08016491,  0.00895008],\n",
              "        [ 0.04237318,  0.27052167, -0.22250289,  0.04258308, -0.27882767,\n",
              "          0.27637067, -0.13193154, -0.06283242,  0.0139567 ,  0.12244275],\n",
              "        [-0.24436127, -0.21924984, -0.26079938, -0.01980868,  0.15967733,\n",
              "         -0.25715917,  0.10163313,  0.08370084,  0.18264943, -0.25659522],\n",
              "        [-0.12307344,  0.02223063,  0.1523107 , -0.01867852, -0.05355938,\n",
              "         -0.01808742,  0.1507493 , -0.23630066, -0.09981614,  0.1175136 ],\n",
              "        [-0.10568671,  0.01257589, -0.08024101, -0.0370857 ,  0.27351418,\n",
              "         -0.20222314,  0.14925107,  0.18467402,  0.20685282,  0.08626956],\n",
              "        [ 0.04409817,  0.02158967,  0.06860393,  0.25218835,  0.23285183,\n",
              "          0.0752638 ,  0.24944654,  0.04355675, -0.0766101 , -0.02318099],\n",
              "        [ 0.06671983,  0.23457018, -0.231018  ,  0.18516552, -0.04345247,\n",
              "          0.09398881, -0.04752466,  0.21893874, -0.01189062,  0.23757163],\n",
              "        [ 0.06907773, -0.13000445,  0.28081217, -0.26291794,  0.27696475,\n",
              "         -0.14342204,  0.06034735, -0.24248761, -0.09337409,  0.09605679],\n",
              "        [-0.09850785,  0.16698796, -0.10537083,  0.17129248, -0.18948972,\n",
              "          0.03762108, -0.02467719, -0.08164631, -0.23432618,  0.23619446],\n",
              "        [-0.06764303,  0.15557772, -0.06823571, -0.22003382,  0.1918143 ,\n",
              "          0.25132385, -0.15402238,  0.2435176 , -0.02252275,  0.2816985 ],\n",
              "        [-0.08846414, -0.16910136, -0.15102202, -0.14867923,  0.22177544,\n",
              "          0.07343724,  0.05377167,  0.1600757 , -0.14761643,  0.12779921],\n",
              "        [-0.25215384, -0.17341475, -0.13354778,  0.232124  , -0.12407623,\n",
              "          0.10456091, -0.22845215, -0.08833168,  0.07235563,  0.04326352],\n",
              "        [ 0.05923927,  0.12051824, -0.13581419, -0.27832502,  0.2072168 ,\n",
              "         -0.21368234, -0.15326834, -0.23356189,  0.1168347 , -0.14694093],\n",
              "        [-0.20611787,  0.05125549, -0.14981182, -0.15806483,  0.09408495,\n",
              "         -0.08571512,  0.11707273, -0.16933775,  0.27379605,  0.06148592],\n",
              "        [ 0.15113282, -0.10713914,  0.22841373, -0.27610648, -0.05022168,\n",
              "         -0.02882895,  0.10397226, -0.02511713, -0.18181847,  0.1713486 ],\n",
              "        [ 0.18128318, -0.10429023, -0.2009655 , -0.07418911, -0.2750929 ,\n",
              "         -0.19935122, -0.02846459,  0.02821034, -0.18953915,  0.08145085],\n",
              "        [ 0.13580155,  0.11994675, -0.14846578,  0.22343782,  0.01496887,\n",
              "          0.24849847,  0.0910556 , -0.18397123, -0.250325  , -0.14126961],\n",
              "        [-0.14444405, -0.02680328, -0.13440257,  0.0168331 ,  0.27720776,\n",
              "          0.25134608,  0.22236177, -0.25967887,  0.03434068, -0.11780213],\n",
              "        [-0.1757606 ,  0.15514961,  0.08831376,  0.11791456,  0.1662069 ,\n",
              "         -0.23246351, -0.09846807,  0.18085465,  0.04453421,  0.02505726],\n",
              "        [-0.17154285,  0.1948643 ,  0.1971935 ,  0.237874  , -0.17840663,\n",
              "          0.21521065, -0.18042904, -0.23281184,  0.22234908, -0.15734826],\n",
              "        [-0.00160488, -0.20034322,  0.0932886 ,  0.09900221,  0.25865605,\n",
              "          0.14577141, -0.0625705 ,  0.2019167 ,  0.22785029,  0.24613729],\n",
              "        [-0.22258803,  0.04650721,  0.04433474,  0.1580258 , -0.02878755,\n",
              "         -0.00640601,  0.12259382, -0.13437413,  0.06810924, -0.09445895],\n",
              "        [-0.13012074,  0.2232317 , -0.08597885,  0.01340926, -0.23321748,\n",
              "         -0.08927487, -0.13436605, -0.06231803, -0.05302775,  0.12686458],\n",
              "        [-0.02845368, -0.05999534, -0.14227438, -0.1444849 , -0.10795693,\n",
              "          0.02773398,  0.15244627,  0.03129998,  0.01569086,  0.15182209],\n",
              "        [ 0.00663337,  0.00501612, -0.22227716, -0.03905489, -0.1769902 ,\n",
              "          0.23917702,  0.030671  , -0.16222778,  0.26565   , -0.18897764],\n",
              "        [-0.13948101,  0.07442847, -0.10376118, -0.14352523, -0.25313607,\n",
              "          0.00740513,  0.2664664 ,  0.28151354, -0.24290322, -0.02400586],\n",
              "        [-0.16677839,  0.26964745, -0.02626914, -0.20269477,  0.04585424,\n",
              "          0.02101195, -0.14578295,  0.15172604,  0.22311029,  0.2744517 ],\n",
              "        [-0.0378193 , -0.24618599,  0.02775046, -0.22919926,  0.11943242,\n",
              "         -0.27273387,  0.06104872,  0.12552595, -0.23917292,  0.11815733],\n",
              "        [-0.02831158, -0.25724676,  0.08617878, -0.26011994,  0.27417383,\n",
              "         -0.09011988, -0.05441554, -0.07640806, -0.05861148, -0.18623132],\n",
              "        [-0.18890296,  0.08226955, -0.15399705, -0.21873626,  0.1635527 ,\n",
              "         -0.25658748, -0.12787808, -0.02313402, -0.15365577, -0.00195017],\n",
              "        [ 0.22605088,  0.17980087, -0.1282595 ,  0.2064535 , -0.13620713,\n",
              "          0.17194876,  0.22549286, -0.18009503, -0.15485965, -0.15010858],\n",
              "        [-0.27350333, -0.1865007 ,  0.0183399 ,  0.07257247,  0.2172834 ,\n",
              "         -0.01764247, -0.2637077 ,  0.14754379, -0.20595683,  0.18078533],\n",
              "        [-0.2112557 , -0.13848664, -0.00371307,  0.21999434, -0.09587641,\n",
              "          0.0735257 , -0.22889295, -0.07777555, -0.2802966 , -0.00932428],\n",
              "        [ 0.15351722, -0.23323758,  0.2151146 ,  0.24219438,  0.03572887,\n",
              "         -0.09926441,  0.14504594,  0.01900995,  0.1927366 ,  0.22873095],\n",
              "        [ 0.08970508, -0.034233  , -0.09640527,  0.01970229,  0.14665443,\n",
              "         -0.0636936 ,  0.1186187 ,  0.2828447 ,  0.2678847 ,  0.2647377 ],\n",
              "        [ 0.15843973, -0.04223481,  0.19530714, -0.02507123,  0.10778469,\n",
              "          0.2045531 ,  0.17505684, -0.07466576, -0.05291492, -0.06544419],\n",
              "        [-0.04589321,  0.19958484, -0.25943768, -0.14144653, -0.17698517,\n",
              "         -0.19370577, -0.2481357 ,  0.1599654 ,  0.2192339 ,  0.01411265],\n",
              "        [ 0.11785081, -0.28467754, -0.12725976, -0.07613663,  0.18869033,\n",
              "         -0.05520135,  0.10112268, -0.06445307, -0.2836554 ,  0.22610155],\n",
              "        [ 0.22683266,  0.09702134, -0.14436142, -0.276316  ,  0.05906147,\n",
              "         -0.17171732, -0.04641093, -0.1301925 , -0.2275812 , -0.06089962],\n",
              "        [ 0.20987064, -0.09029213,  0.00685421, -0.06456231, -0.03148913,\n",
              "         -0.15888241, -0.04380277, -0.14716917, -0.18187808, -0.2760692 ],\n",
              "        [-0.10074154,  0.0927296 , -0.16863135, -0.02825108, -0.11309837,\n",
              "         -0.05495457, -0.18084134,  0.22112629, -0.02907044,  0.18954125],\n",
              "        [-0.07226554, -0.27663323, -0.03472927,  0.1635096 ,  0.26323345,\n",
              "          0.2166548 , -0.06645152,  0.19267249, -0.1753614 ,  0.1046313 ],\n",
              "        [-0.15575382, -0.21999276,  0.25903633,  0.21346653, -0.17198996,\n",
              "          0.05901727,  0.2732719 , -0.21636647, -0.19393517, -0.15959626],\n",
              "        [-0.19767824,  0.2803463 ,  0.10337678, -0.13660407, -0.0450374 ,\n",
              "         -0.02047452,  0.25270757,  0.28202638, -0.24628076,  0.22088888],\n",
              "        [ 0.14833945, -0.13894142, -0.0038842 ,  0.01619765, -0.23037633,\n",
              "          0.19897994, -0.21310738,  0.08832842,  0.16823813,  0.21808347],\n",
              "        [-0.07344884, -0.01544484, -0.26266003, -0.11481196,  0.11594823,\n",
              "         -0.06671846, -0.10144691,  0.19793397, -0.21306598, -0.11967465],\n",
              "        [ 0.024389  ,  0.10427353, -0.18283701, -0.11205879, -0.20122361,\n",
              "         -0.05240622, -0.12665364,  0.02274656,  0.25581   , -0.17397918],\n",
              "        [ 0.10240117,  0.24211666,  0.23515669,  0.04682165, -0.00709909,\n",
              "          0.05730692, -0.13790761, -0.09673004,  0.14185748, -0.28389362],\n",
              "        [ 0.1372486 ,  0.13526645,  0.19638109,  0.04001164, -0.2283343 ,\n",
              "          0.03228778, -0.16154855, -0.28089726, -0.16438462, -0.23241238],\n",
              "        [ 0.21433929, -0.18928307, -0.1390195 ,  0.16423038,  0.11053759,\n",
              "          0.2095741 , -0.13431981, -0.21138714, -0.22934768, -0.20369768]],\n",
              "       dtype=float32)>,\n",
              " <tf.Variable 'dense_7/bias:0' shape=(10,) dtype=float32, numpy=array([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.], dtype=float32)>]"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Listing 7.5\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dk-EUDx0b1TO",
        "outputId": "50758f46-cd34-44b0-8db9-15fa2b32820e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_3\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_6 (Dense)             (None, 64)                256       \n",
            "                                                                 \n",
            " dense_7 (Dense)             (None, 10)                650       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 906 (3.54 KB)\n",
            "Trainable params: 906 (3.54 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Listing 7.6\n",
        "model= keras.Sequential(name=\"my_example_model\")\n",
        "model.add(layers.Dense(64, activation=\"relu\", name=\"my_first_layer\"))\n",
        "model.add(layers.Dense(10, activation=\"softmax\", name=\"my_last_layer\"))\n",
        "model.build((None, 3))\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P69TGxYrcZWU",
        "outputId": "45a77a3d-01db-4582-8029-fde22ba9097a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"my_example_model\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " my_first_layer (Dense)      (None, 64)                256       \n",
            "                                                                 \n",
            " my_last_layer (Dense)       (None, 10)                650       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 906 (3.54 KB)\n",
            "Trainable params: 906 (3.54 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Listing 7.7\n",
        "model = keras.Sequential()\n",
        "model.add(keras.Input(shape=(3,)))\n",
        "model.add(layers.Dense(64, activation=\"relu\"))\n",
        "model.summary()\n",
        "model.add(layers.Dense(10, activation=\"softmax\"))\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Db4KRRFedB-t",
        "outputId": "edc80bfc-573c-434e-c029-7d2859cd45de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_8 (Dense)             (None, 64)                256       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 256 (1.00 KB)\n",
            "Trainable params: 256 (1.00 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n",
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " dense_8 (Dense)             (None, 64)                256       \n",
            "                                                                 \n",
            " dense_9 (Dense)             (None, 10)                650       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 906 (3.54 KB)\n",
            "Trainable params: 906 (3.54 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Listing 7.8\n",
        "inputs = keras.Input(shape=(3,), name=\"my_input\")\n",
        "features = layers.Dense(64, activation=\"relu\")(inputs)\n",
        "outputs = layers.Dense(10, activation=\"softmax\")(features)\n",
        "model = keras.Model(inputs=inputs, outputs=outputs)\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wbHdoobtfY05",
        "outputId": "10df84e8-f545-44cb-a5f9-fe3681da5e22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " my_input (InputLayer)       [(None, 3)]               0         \n",
            "                                                                 \n",
            " dense_10 (Dense)            (None, 64)                256       \n",
            "                                                                 \n",
            " dense_11 (Dense)            (None, 10)                650       \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 906 (3.54 KB)\n",
            "Trainable params: 906 (3.54 KB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Listing 7.9\n",
        "vocabulary_size = 10000\n",
        "num_tags = 100\n",
        "num_departments = 4\n",
        "\n",
        "title = keras.Input(shape=(vocabulary_size,), name=\"title\")\n",
        "text_body = keras.Input(shape=(vocabulary_size,), name=\"text_body\")\n",
        "tags = keras.Input(shape=(num_tags,), name=\"tags\")\n",
        "features = layers.Concatenate() ([title, text_body, tags])\n",
        "features = layers.Dense(64, activation=\"relu\")(features)\n",
        "priority = layers.Dense(1, activation=\"sigmoid\", name=\"priority\")(features)\n",
        "department = layers.Dense(\n",
        "    num_departments,\n",
        "    activation=\"softmax\",\n",
        "    name=\"department\")(features)\n",
        "model = keras.Model(inputs=[title, text_body, tags],\n",
        "                    outputs=[priority, department])\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TE3uc-UijEa0",
        "outputId": "cef5fc24-1d8d-4dc9-c9a7-224137dcc749"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model: \"model_1\"\n",
            "__________________________________________________________________________________________________\n",
            " Layer (type)                Output Shape                 Param #   Connected to                  \n",
            "==================================================================================================\n",
            " title (InputLayer)          [(None, 10000)]              0         []                            \n",
            "                                                                                                  \n",
            " text_body (InputLayer)      [(None, 10000)]              0         []                            \n",
            "                                                                                                  \n",
            " tags (InputLayer)           [(None, 100)]                0         []                            \n",
            "                                                                                                  \n",
            " concatenate (Concatenate)   (None, 20100)                0         ['title[0][0]',               \n",
            "                                                                     'text_body[0][0]',           \n",
            "                                                                     'tags[0][0]']                \n",
            "                                                                                                  \n",
            " dense_12 (Dense)            (None, 64)                   1286464   ['concatenate[0][0]']         \n",
            "                                                                                                  \n",
            " priority (Dense)            (None, 1)                    65        ['dense_12[0][0]']            \n",
            "                                                                                                  \n",
            " department (Dense)          (None, 4)                    260       ['dense_12[0][0]']            \n",
            "                                                                                                  \n",
            "==================================================================================================\n",
            "Total params: 1286789 (4.91 MB)\n",
            "Trainable params: 1286789 (4.91 MB)\n",
            "Non-trainable params: 0 (0.00 Byte)\n",
            "__________________________________________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Listing 7.10\n",
        "import numpy as np\n",
        "\n",
        "num_samples = 1280\n",
        "\n",
        "title_data = np.random.randint(0, 2, size=(num_samples, vocabulary_size))\n",
        "text_body_data = np.random.randint(0, 2, size=(num_samples, vocabulary_size))\n",
        "tags_data = np.random.randint(0, 2, size=(num_samples, num_tags))\n",
        "\n",
        "priority_data = np.random.random(size=(num_samples, 1))\n",
        "department_data = np.random.randint(0, 2, size=(num_samples, num_departments))\n",
        "\n",
        "model.compile(optimizer=\"rmsprop\",\n",
        "              loss=[\"mean_squared_error\", \"categorical_crossentropy\"],\n",
        "              metrics = [[\"mean_absolute_error\"], [\"accuracy\"]])\n",
        "model.fit([title_data, text_body_data, tags_data],\n",
        "          [priority_data, department_data],\n",
        "          epochs=1)\n",
        "model.evaluate([title_data, text_body_data, tags_data],\n",
        "               [priority_data, department_data])\n",
        "priority_preds, department_preds = model.predict(\n",
        "    [title_data, text_body_data, tags_data])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "eOacUHGEkkqj",
        "outputId": "140203a6-4e91-4413-8a56-77061ee8b4a0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "40/40 [==============================] - 2s 23ms/step - loss: 28.6275 - priority_loss: 0.3119 - department_loss: 28.3157 - priority_mean_absolute_error: 0.4773 - department_accuracy: 0.2164\n",
            "40/40 [==============================] - 1s 10ms/step - loss: 18.8994 - priority_loss: 0.3359 - department_loss: 18.5635 - priority_mean_absolute_error: 0.5016 - department_accuracy: 0.2641\n",
            "40/40 [==============================] - 1s 14ms/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 106
        },
        "id": "aKXrnF6eVUuJ",
        "outputId": "a8aaf2c1-8419-473c-ad69-be436905b9b1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-14-a6a1e5cb3f09>, line 3)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-14-a6a1e5cb3f09>\"\u001b[0;36m, line \u001b[0;32m3\u001b[0m\n\u001b[0;31m    )\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    }
  ]
}